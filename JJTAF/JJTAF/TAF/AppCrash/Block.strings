/* 
  Block.strings
  JJTAF

  Created by xiedong on 2020/12/1.
  
 1. Block的使用
 2. Block的底层数据结构
 3. Block的变量捕获机制
 4. Block的类型
 5. Block的copy
 6. Block的循环引用问题
*/

/**     Block的使用
 Block是什么？
    块，封装了函数调用以及调用环境的OC对象
 
 Block的声明
    1. @property (nonatomic, copy) void (^myBlock)(void);
    2. typedef void(^myBlock)(void);
        @property (nonatomic, copy) myBlock block;
    3. void(^myBlock)(void)  // 返回值类型（^block变量名）（参数1类型，参数2类型，......）
 
 Block的定义
    void(^block1)(void) = ^{ };          // 无返回值 无参数
    void(^block2)(int) = ^(int a){ };    // 无返回值 有参数
    int(^block3)(void) = ^int { };       // 有返回值 无参数   不管有没有返回值，定义的返回值类型都可省略
    int(^block4)(void) = ^{ };           // 有返回值 无参数
    int(^block5)(int) = ^int(int a){ };  // 有返回值 有参数
 
 Block的调用
    block();
    int a = block5(1);
 
 Block的Code Snippets快捷方式 inlineBlock
 */

/**     Block的底层数据结构
 Block本质上也是一个OC对象，它内部也有isa指针
 Block是封装了函数调用以及调用环境的OC对象
 Block的底层数据结构如下图所示
 
    Block_layout
 
    void *isa
    int flags
    int reserved
    void *(void *, ...) invoke
    struct Block_descriptor * descriptor
    variables 捕获的变量
 
    descriptor  ->  Block_descriptor
    
    unsigned long int reserved
    unsigned long int size
    void *(void *, void *) copy
    void *(void *) dispose
 
 // xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc main.m
    int main() {
        void (^block)(void) = ^{
            NSLog(@"调用了block");
        };
 
        block();
 
        return 0;
    }
 
    执行之后可以看到对应的main.cpp文件 可以看到对应的代码
    
     struct __main_block_impl_0 {
        struct __block_impl;                // block的结构体
        struct __main_block_desc_0 *Desc;   // block的描述对象，描述block的大小等
        
        // 构造函数
        // 参数1 __main_block_func_0 结构体
        // 参数2 __main_block_desc_0 结构体地址
        // 参数3 flags 标识位
        __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int flags=0) {
            impl.isa = &_NSConcreteStackBlock;
            impl.Flags = flags;
            impl.FuncPtr = fp;
            Desc = desc;
        }
     }
 
     struct __main_block_func_0(struct __main_block_impl_0 *__cself) {
        ....
     }
     
     struct __block_impl {
        void *isa;      // block的类型
        int Flags;      // 标识位
        int reserved;   //
        void *FuncPtr;  // block的执行函数指针，执行__main_block_func_0
     }
     
     static struct __main_block_desc_0 {
        size_t reserved;
        size_t Block_zise;  // block本质结构体所占内存空间
     }__main_block_desc_0_DATA = {0, sizeof(struct __main_block_desc_0)};
 
 
    结构体命名解释
    ① Block底层数据结构就是一个__main_block_impl_0结构体对象，其中有__block_impl和__main_block_desc_0两个结构体对象成员
        main:表示block所在的函数
        block:表示这是一个block
        impl:表示实现
        0：表示这是该函数中的第一个block
    ② __main_block_func_0 结构体封装了block里的代码
    ③ __block_impl 结构体才是真正定义block的结构，其中FuncPtr指针指向__main_block_func_0
    ④ __main_block_desc_0是block的描述对象，存储这block的内存大小等
    ⑤ 定义block的本质：调用__main_block_impl_0（）构造函数，并且给他传了两个参数__main_block_func_0和&__main_block_desc_0_DATA。拿到函数的返回值，再取返回值的地址&__main_block_impl_0，把这个地址赋值给block变量
    ⑥ 调用block的本质：通过__main_block_impl_0中的__block_impl的FuncPtr拿到函数地址，直接调用
 */


/**     Block的变量捕获机制
 对于全局变量，不会捕获到block内部，访问方式为直接访问
 对于auto类型的局部变量，会捕获到block内部，block内部会自动生成一个成员变量，用来存储这个变量的值，访问方式为值传递
 对于static类型的局部变量，会捕获到block内部，block内部会自动生成一个成员变量，用来存储这个变量的值，访问方式为指针传递
 对于对象类型的局部变量，block会 连同他的所有权修饰符一起捕获
 
 1. auto类型的局部变量 （值传递）
    int age = 10; 实际上我们定义出来的都是auto类型，只是省略了  auto int age = 10;
    void (^block)(void) = {
        NSLog(@"%d",age);
    }
    age = 20;
    block();  // 10;
 
    通过Clang将代码转成c++
 
     struct __main_block_impl_0 {
        struct __block_impl;                // block的结构体
        struct __main_block_desc_0 *Desc;   // block的描述对象，描述block的大小等
        int age;
        
        __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc,int _age, int flags=0) {
            impl.isa = &_NSConcreteStackBlock;
            impl.Flags = flags;
            impl.FuncPtr = fp;
            Desc = desc;
        }
     }
     
     struct __main_block_func_0(struct __main_block_impl_0 *__cself) {
        int age = __cself->age;
        ....
     }
 
    由于是值传递，我们修改外部的age变量的值，不会影响到block内部的age的变量
 
 2. static类型的局部变量 （指针传递）
     static int age = 10;
     void (^block)(void) = {
         NSLog(@"%d",age);
     }
     age = 20;
     block();  // 20
 
     通过Clang将代码转成c++
    
     struct __main_block_impl_0 {
        struct __block_impl;                // block的结构体
        struct __main_block_desc_0 *Desc;   // block的描述对象，描述block的大小等
        int *age;
        
        __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc,int *_age, int flags=0) {
            impl.isa = &_NSConcreteStackBlock;
            impl.Flags = flags;
            impl.FuncPtr = fp;
            Desc = desc;
        }
     }
     
     struct __main_block_func_0(struct __main_block_impl_0 *__cself) {
        int *age = __cself->age;
        ....
     }
 
    由于是指针传递，我们修改外部的age变量的值，会影响到block内部的age变量
 
 3. 全局变量
    全局变量不会捕获到block内部，访问方式为直接访问
    int _age = 10;
    static int _height = 20;
    ....
    
     void (^block)(void) = {
         NSLog(@"%d,%d",_age,_height);
     }
     block();
 
    通过Clang将代码转成c++ 会发现__main_block_impl_0结构体内没有任何变化
 
     为什么局部变量需要捕获，全局变量不用捕获呢？
     作用域的原因，全局变量哪里都可以直接访问，所以不用捕获；局部变量，外部不能直接访问，所以需要不会；
     auto类型的局部变量可能会销毁，其内存会消失，block将来执行代码的时候不可能再去访问那块内存，所以需要捕获；static变量会一直保存在内存中，所以捕获其地址即可
 
 4. 对象类型的auto变量
    ① 如果block是在栈上，将不会对auto变量产生强引用
    ② 如果block被拷贝到堆上
        * block内部的desc结构体会新增两个函数:
          copy(__main_block_copy_0, 函数命名规范同__main_block_impl_0)
          dispose(__main_block_dispose_0)
        * 会调用block内部的copy函数
        * copy函数内部会调用_Block_object_assign函数
        * _Block_object_assign函数会根据auto变量的修饰符(__strong,__weak,__unsafe_unretained)做出相应的操作，形成强引用（retain）或者弱引用
    ③ 如果block从堆上移除
        * 会调用block内部的dispose函数
        * dispose函数会调用_Block_object_dispose函数
        * _Block_object_dispose函数会自动释放引用的auto变量(release)
 
    typedef void(^myBlock)(void);
    int main() { // 作用域1
 
        myBlock block;
        { // 作用域2
            Person *p = [Person new];
            p.name = @"lisi";
            block = ^{
                NSLog(@"%@",p.name);
            };
        }
        NSLog(@"-----");
        return 0;
    }
    // block 保存在堆中，当执行完作用域2的时候，person的对象并没有释放，而是在执行完作用域1的时候释放，说明block内部对Person对象产生了强引用
 
    通过Clang将以上代码转为c++代码
    //弱引用需要运行时的支持，所以需要加上 -fobjc-arc -fobjc-runtime=ios-8.0.0
    xcrun -sdk iphones clang -arch arm64 -rewrite-objc -fobjc-arc -fobjc-runtime=ios-8.0.0 main.m
 
    struct __main_block_impl_0 {
        struct __block_impl;                // block的结构体
        struct __main_block_desc_0 *Desc;   // block的描述对象，描述block的大小等
        Person *__strong p; // 强引用
        
        __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc,Person *_p, int flags=0) {
            impl.isa = &_NSConcreteStackBlock;
            impl.Flags = flags;
            impl.FuncPtr = fp;
            Desc = desc;
        }
     }
     
     struct __main_block_func_0(struct __main_block_impl_0 *__cself) {
        Person *__strong p = __cself->p;
        ....
     }
 
     static void __main_block_copy_0(struct __main_block_impl_0 *dst, struct __main_block_impl_0 *src) {
        _Block_object_assign((void*)&dst->p, (void*)src->p, 3 //BLOCK_FIELD_IS_OBJECT);
     }
     static void __main_block_dispose_0(struct __main_block_impl_0 *src) {
        _Block_object_dispose((void *)src->p, 3 //BLOCK_FIELD_IS_OBJECT);
     }
        
     static struct __main_block_desc_0 {
        size_t reserved;
        size_t Block_zise;  // block本质结构体所占内存空间
        void (*copy)(struct __main_block_impl_0 *, struct __main_block_impl_0 *);
        void (*dispose)(struct __main_block_impl_0 *)
     }__main_block_desc_0_DATA = {0, sizeof(struct __main_block_desc_0),__main_block_copy_0,__main_block_dispose_0};
 
 
 
        
     typedef void(^myBlock)(void);
     int main() { // 作用域1

         myBlock block;
         { // 作用域2
             __weak Person *p = [Person new];
             p.name = @"lisi";
             block = ^{
                 NSLog(@"%@",p.name);
             };
         }
         NSLog(@"-----");
         return 0;
     }
     // 当执行完作用域2的时候，person的对象就释放了
 
     struct __main_block_impl_0 {
         struct __block_impl;                // block的结构体
         struct __main_block_desc_0 *Desc;   // block的描述对象，描述block的大小等
         Person *__weak p; // 强引用
         
         __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc,Person *_p, int flags=0) {
             impl.isa = &_NSConcreteStackBlock;
             impl.Flags = flags;
             impl.FuncPtr = fp;
             Desc = desc;
         }
      }
      
      struct __main_block_func_0(struct __main_block_impl_0 *__cself) {
         Person *__weak p = __cself->p;
         ....
      }
 
    说明当block内部访问了对象类型的auto变量时，如果block被拷贝到堆上，会连同对象的所有权修饰符一起捕获
 
 5. __block修饰的变量

 __block的作用
 默认情况下block是不能修改外面的auto变量的，解决办法：
    * 变量用static修饰（原因，捕获static类型的局部变量是指针传递，可以访问到到改遍变量的内存地址）
    * 全局变量
    * __block（我们只希望临时用一下这个变量临时改一下而已，而改为static变量和全局变量会一直在内存中）
    
 __block修饰符
    * __block可以用于解决block内部无法修改auto变量值的问题
    * __block不能修饰全局变量、静态变量
    * 编译器会将__block变量包装成一个对象（struct __Block_byref_age_0）(byref:按地址传递)
    * 加__block修饰不会改变修饰变量的性质，它还是auto变量
    * 一般情况下，对不会变量进行赋值（赋值！=使用）操作需添加__block修饰符。比如给数组添加或者删除对象，就不用加__block修饰
 
 使用示例
    __block int age = 10;
    void(^block)(void) = ^{
        age = 20;
        NSLog(@"block-%d",age);
    };
    block();
    NSLog(@"%d",age);
    // block-20
    // 20
 
    通过Clang将以上代码转换为c++代码
    * 编译器会将__block修饰的变量包装成__Block_byref_age_0对象
    * 以上age = 20;的赋值过程为:通过block结构体里的(__Block_byref_age_0)类型的age指针，找到__Block_byref_age_0结构体的内存（即被__block包装成对象的内存），把__Block_byref_age_0结构体里的age变量的值改为20；
    * 由于编译器将__block变量包装成了一个对象，所以它的内存管理几乎等同于访问对象类型的auto变量，但还是有差异
 
     struct __Block_byref_age_0 {
        void *__isa;
        __Block_byref_age_0 *__forwarding;
        int __flags;
        int __size;
        int age;
     };
     
     struct __main_block_impl_0 {
         struct __block_impl;                // block的结构体
         struct __main_block_desc_0 *Desc;   // block的描述对象，描述block的大小等
        __Block_byref_age_0 *age;
         
         __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc,__Block_byref_age_0 *_age, int flags=0) {
             impl.isa = &_NSConcreteStackBlock;
             impl.Flags = flags;
             impl.FuncPtr = fp;
             Desc = desc;
         }
      }
      
      struct __main_block_func_0(struct __main_block_impl_0 *__cself) {
        __Block_byref_age_0 *age = __cself->age;
        (age->__forwarding->age) = 20;
         ....
      }
 
 __block的内存管理
     ① 如果block是在栈上，将不会对__block变量产生强引用
     ② 如果block被拷贝到堆上
         * block内部的desc结构体会新增两个函数:
           copy(__main_block_copy_0, 函数命名规范同__main_block_impl_0)
           dispose(__main_block_dispose_0)
         * 会调用block内部的copy函数
         * copy函数内部会调用_Block_object_assign函数
         * _Block_object_assign函数会对__block变量形成强引用（retain）   这个位置是与auto变量的区别点所在
     ③ 如果block从堆上移除
         * 会调用block内部的dispose函数
         * dispose函数会调用_Block_object_dispose函数
         * _Block_object_dispose函数会自动释放引用的__block变量(release)
 
 __block的__forwarding指针
    存在的意义？为什么要通过age结构里的__forwarding指针拿到age变量的值，而不直接age结构体拿到age变量的值？
    
    __block的__forwarding是指向自己本身的指针，为了不论在任何内存位置，都可以顺利访问同一个__block变量
 
    * block对象copy到堆上时，内部的__block变量也会copy到堆上。为了防止age的值赋值给栈上的__block变量，就使用了__forwarding;
    * 当__block变量在栈上的时候，__block变量的结构体中的__forwarding指针指向自己，这样通过__forwarding取到结构体中的age给它赋值没有问题
    * 当__block变量copy到堆上的时候，栈上的__forwarding指针会指向copy到堆上的__block变量结构体，而堆上的 __forwading指向自己
 
    这样不管我们访问的是栈上还是堆上的__block变量的结构体，只要通过__forwarding指针访问，都是访问到堆上的__block变量结构体；给age赋值，就肯定会赋值给堆上的那个__block变量中的age
 
 6. __block修饰的对象类型
    ① 当__block对象是在栈上，将不会对指向的对象产生强引用
    ② 当__block对象在堆上
        * __Block_byref_object_0即__block变量内部会新增两个函数
            copy（__Block_byref_id_object_copy）
            dispose (__Block_byref_id_object_dispose)
        * 会调用 __block 变量内部的 copy 函数
        * copy 函数内部会调用_Block_object_assign函数
        * _Block_object_assign函数会根据所指向对象的修饰符（__strong、__weak、__unsafe_unretained）做出相应的操作，形成强引用（retain）或者弱引用（注意：这里仅限于 ARC 时会 retain，MRC 时不会 retain）
    ③ 当__block对象从堆上移除
        * 会调用 __block 变量内部的 dispose 函数
        * dispose 函数内部会调用_Block_object_dispose函数
        * _Block_object_dispose函数会自动释放指向的对象（release）
    
 */
