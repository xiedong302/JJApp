/* 
  Association.strings
  JJTAF

  Created by xiedong on 2020/12/1.
  
*/

/**     Association
 使用场景
    默认情况下由于分类底层结构的限制，不能直接给Category添加成员变量，但是可以通过关联对象简介实现Category有成员变量的效果
 
 相关API
    objc_setAssociationObject : 使用给定的key和关联策略为给定的对象设置关联的value
    objc_setAssociationObject(id object, const void *key, id value, objc_AssocoationPolicy policy);
 
    objc_getAssociationObject : 返回给定key的给定对象关联的value
    objc_getAssociationObject(id object, const void *key);
 
    objc_removeAssociationObject : 删除给定对象的所有关联
    objc_removeAssociationObject(id object);
 
    如果只想移除给定对象的某个key的关联， 可以使用objc_setAssociationObject给参数value传值为nil
 
 objc_AssociationPolicy关联策略
    OBJC_ASSOCIATION_ASSIGN             assign
    OBJC_ASSOCIATION_RETAIN_NONATOMIC   strong, nonatomic
    OBJC_ASSOCIATION_COPY_NONATOMIC     copy,nonatomic
    OBJC_ASSOCIATION_RETAIN             strong,atomic
    OBJC_ASSOCIATION_COPY               copy,atomic
    
 key的常见用法
    ① static const void *MyKey = &MyKey;
        objc_getAssociationObject(object,MyKey);
    ② static const char MyKey;
        objc_getAssociationObject(object,&MyKey);
    ③ 使用属性名作为key #define MYKEY @"MYKEY"
        objc_getAssociationObject(object,MYKEY);
    ④ 使用getter方法的sel作为key，（可读性高，有智能提示）
        objc_getAssociationObject(object,@selector(getter));
 
 原理
    实现关联对象技术的核心对象
    AssociationManager
    AssociationHashMap
    ObjectAssociationMap
    ObjcAssociation
 
 AssociationManager
    关联对象并不是存在关联对象本身的内存中，而是存在全局统一的一个容器中
    由AssociationManager管理并在它维护的一个单例Hash表AssociationHashMap中存储
    使用AssociationManagerLock自旋锁保证了线程安全
 
 AssociationHashMap
    一个单例的Hash表，存储disguised_ptr_t 和 ObjectAssociationMap之间的映射
    disguised_ptr_t是根据object生成的，单不存在引用关系。 disguised_ptr_t disguised_object = DISGUISE(object);
 
 ObjectAssociationMap
    存储key和ObjcAssociation之间的映射
 
 ObjcAssociation
    存储关联策略policy和关联对象的value
 */
