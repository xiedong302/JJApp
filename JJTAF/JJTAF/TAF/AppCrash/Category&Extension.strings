/* 
  Category&Extension.strings
  JJTAF

  Created by xiedong on 2020/12/1.
  // https://juejin.cn/post/6844904067987144711
*/

/**     Category
 1. Category使用场合
    ① 给一个分类添加新的方法，可以为系统的类扩展功能
    ② 分解体积庞大的类，可以将一个类按功能拆解成多个模块，方便代码管理
    ③ 创建对私有方法的前向引用：声明私有方法，把Framework的私有方法公开等。直接调用其他类的私有方法时编译器会报错，这时候创建一个该类的分类，在分类中声明这些私有方法（不必提供方法实现），接着导图这个分类的头文件就可以正常调用这些私有方法了。
    ④ 向对象添加非正式协议：创建一个NSObject或其子类的分类称为“创建一个非正式协议”。
 
        正式协议是通过protocol指定的一系列方法的声明，然后由遵守该协议的类自己去实现这些方法。
        非正式协议是通过给NSObject或其子类添加一个分类来实现。非正式协议已经渐渐被正式协议取代，正式协议最大的优点就是可以使用 泛型 约束，而非正式协议不可以
 
 2. Category中都可以添加哪些内容
    ① 实例方法，类方法，协议，属性（只生成setter和getter方法的声明，不会生成setter和getter的方法实现以及下划线成员变量）
    ② 默认情况下，因为分类底层机构的限制，不能添加成员变量到分类中，但是可以通过关联对象来间接实现这种效果。
 
 3. Category的优缺点
    优点： 见使用场合
          可以按需加载不同的分类
 
    缺点：不能直接添加成员变量，但是可以通过关联对象实现这种效果
        分类方法会”覆盖“同名的宿主类的方法，如果使用不当会造成问题
 
    特点：运行时决议
        可以有申明，可以有实现
        可以为系统的类添加分类
    
    注意点：分类方法会”覆盖“同名的宿主类的方法，如果使用不当会造成问题
          同名分类方法谁能生效取决于编译顺序，最后参与编译的分类中的同名方法会最终生效
          名字相同的分类会引起编译报错
 
 4. Category实现原理
    ① 分类的实现原理取决于运行时决议
    ② 同名分类方法谁能生效取决于编译顺序，最后参与编译的分类中的同名方法会最终生效
    ③ 理解“覆盖”：消息的传递过程中优先查找宿主类中靠前的元素，找到同名方法就会进行调用，但实际上宿主类中原有同名方法的实现仍然是存在的。我们可以通过一些手段来调用到宿主类原有同名方法的实现，如可以通过Runtime的class_copyMethodList方法打印类的方法列表，找到宿主类方法的imp，进行调用（可以交换方法实现）
 
 
 4.1 编译
 // xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc Person+test.m
 
 Category底层结构体
 
 struct category_t {
    const char *name;       // 类名
    classref_t cls;         // 扩展的类
    struct method_list_t *instanceMethods;      // 实例方法列表
    struct method_list_t *classMethods;         // 类方法列表
    struct protocol_list_t *protocols;          // 协议列表
    struct property_list_t *instanceProperties; // 属性列表
 
    、、、
 }
 从以上Category的底层结构来看，分类中可以添加实例方法、类方法、协议、属性，但是不能添加成员变量，因为没有存储成员变量对应的指针变量
 
 4.2 加载处理过程
    在编译时，Category中的数据还没有合并到类中，而是在程序运行的时候通过runtime机制将所有分类合并到类（类对象、元类对象）中去。
    ① 通过runtime加载某个类的所有Category数据
    ② 把所有的分类数据（方法、属性、协议），合并到一个大数组中
    ③ 将合并后的分类数据（方法、属性、协议），插入到宿主类原来数据的前面
    
 源码简单理解
 objc-os.mm
    _objc_init：runtime的入口函数，进行一些初始化操作
    map_images: 加锁
    map_images_nolock: 程序或内存镜像的处理
 objc-runtime-new.mm
    _read_images: 读取镜像。完成类、分类、协议的加载等
    remethodizeClass(核心函数): 分类的加载都在这个函数里开始
    attachCategories: 将分类中的所有信息（方法、属性、协议列表）都合并到对应的二维数组中
    arrachLists:将这些信息合并到宿主类中去
    realloc、memmove、memcpy
 
 */

/**     Extension
 1. Extension是什么
    ① extension有一种说法叫“匿名分类”，因为它很像分类，但没有分类名。严格来说要叫类扩展
    ② extension的作用是将原来反正.h中的数据方法.m中去，私有化，变成私有的申明
    ③ extension是在编译的时候就将所有的数据合并到类中去（编译时决议），而Category是在程序运行的时候通过runtime机制将所有数据合并到类中去（运行时决议）
 
 2. Extension一般用来做什么
    ① 声明私有属性
    ② 声明私有方法
    ③ 声明私有成员变量
 
 3. Extension和Category的区别
    ① 编译时决议和运行时决议
    ② Category可以有声明，可以有实现；Extension只以声明的形式存在，多数情况下寄生于宿主类的.m中
    ③ Category可以为系统的类添加分类；Extesion不能为系统类添加扩展
 
 */

/**
    为什么分类中属性不会自动生成setter和getter方法的实现，不会自动生成成员变量，也不能添加成员变量？
    
    因为类的内存布局在编译的时候会确定，但是分类是在运行时加载的，在运行时Runtime会将分类的数据，合并到宿主类中
 
 */
